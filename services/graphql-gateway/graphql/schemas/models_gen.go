// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package schemas

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type AuthPayload struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresAt    string `json:"expiresAt"`
	UserID       string `json:"userId"`
}

type BumpChainVersionInput struct {
	ChainID string  `json:"chainId"`
	Reason  *string `json:"reason,omitempty"`
}

type BumpChainVersionPayload struct {
	Ok         bool   `json:"ok"`
	NewVersion string `json:"newVersion"`
}

type ChainContracts struct {
	ChainID         string       `json:"chainId"`
	ChainNumeric    int          `json:"chainNumeric"`
	NativeSymbol    *string      `json:"nativeSymbol,omitempty"`
	Contracts       []*Contract  `json:"contracts"`
	Params          *ChainParams `json:"params"`
	RegistryVersion string       `json:"registryVersion"`
}

type ChainGasPolicy struct {
	ChainID         string     `json:"chainId"`
	Policy          *GasPolicy `json:"policy"`
	RegistryVersion string     `json:"registryVersion"`
}

type ChainParams struct {
	RequiredConfirmations int  `json:"requiredConfirmations"`
	ReorgDepth            int  `json:"reorgDepth"`
	BlockTimeMs           *int `json:"blockTimeMs,omitempty"`
}

type ChainRPCEndpoints struct {
	ChainID         string         `json:"chainId"`
	Endpoints       []*RPCEndpoint `json:"endpoints"`
	RegistryVersion string         `json:"registryVersion"`
}

type Contract struct {
	Name        string            `json:"name"`
	Address     string            `json:"address"`
	StartBlock  *int              `json:"startBlock,omitempty"`
	VerifiedAt  *string           `json:"verifiedAt,omitempty"`
	Standard    *ContractStandard `json:"standard,omitempty"`
	ImplAddress *string           `json:"implAddress,omitempty"`
	AbiSha256   *string           `json:"abiSha256,omitempty"`
	AbiURL      *string           `json:"abiUrl,omitempty"`
}

type ContractMeta struct {
	ChainID         string    `json:"chainId"`
	Contract        *Contract `json:"contract"`
	RegistryVersion string    `json:"registryVersion"`
}

type GasPolicy struct {
	MaxFeeGwei              float64  `json:"maxFeeGwei"`
	PriorityFeeGwei         float64  `json:"priorityFeeGwei"`
	Multiplier              float64  `json:"multiplier"`
	LastObservedBaseFeeGwei *float64 `json:"lastObservedBaseFeeGwei,omitempty"`
	UpdatedAt               *string  `json:"updatedAt,omitempty"`
}

type IntentStatusPayload struct {
	IntentID        string       `json:"intentId"`
	Kind            string       `json:"kind"`
	Status          IntentStatus `json:"status"`
	ChainID         *string      `json:"chainId,omitempty"`
	TxHash          *string      `json:"txHash,omitempty"`
	ContractAddress *string      `json:"contractAddress,omitempty"`
}

type MediaAsset struct {
	ID        string          `json:"id"`
	Kind      MediaKind       `json:"kind"`
	Mime      string          `json:"mime"`
	Bytes     *string         `json:"bytes,omitempty"`
	Width     *int            `json:"width,omitempty"`
	Height    *int            `json:"height,omitempty"`
	Sha256    string          `json:"sha256"`
	PinStatus PinStatus       `json:"pinStatus"`
	IpfsCid   *string         `json:"ipfsCid,omitempty"`
	CreatedAt string          `json:"createdAt"`
	RefCount  int             `json:"refCount"`
	Variants  []*MediaVariant `json:"variants"`
	URL       *MediaUrls      `json:"url,omitempty"`
}

type MediaPinStatusEvent struct {
	AssetID   string    `json:"assetId"`
	Status    PinStatus `json:"status"`
	Cid       *string   `json:"cid,omitempty"`
	Gateway   *string   `json:"gateway,omitempty"`
	UpdatedAt string    `json:"updatedAt"`
}

type MediaUrls struct {
	Gateway *string `json:"gateway,omitempty"`
	Cdn     *string `json:"cdn,omitempty"`
}

type MediaVariant struct {
	ID     string        `json:"id"`
	CdnURL string        `json:"cdnUrl"`
	Width  int           `json:"width"`
	Height int           `json:"height"`
	Format VariantFormat `json:"format"`
}

type Mutation struct {
}

type NoncePayload struct {
	Nonce string `json:"nonce"`
}

type PrepareCreateCollectionInput struct {
	ChainID                string  `json:"chainId"`
	Name                   string  `json:"name"`
	Symbol                 string  `json:"symbol"`
	TokenURI               *string `json:"tokenURI,omitempty"`
	Type                   string  `json:"type"`
	Description            *string `json:"description,omitempty"`
	MintPrice              *string `json:"mintPrice,omitempty"`
	RoyaltyFee             *string `json:"royaltyFee,omitempty"`
	MaxSupply              *string `json:"maxSupply,omitempty"`
	MintLimitPerWallet     *string `json:"mintLimitPerWallet,omitempty"`
	MintStartTime          *string `json:"mintStartTime,omitempty"`
	AllowlistMintPrice     *string `json:"allowlistMintPrice,omitempty"`
	PublicMintPrice        *string `json:"publicMintPrice,omitempty"`
	AllowlistStageDuration *string `json:"allowlistStageDuration,omitempty"`
}

type PrepareCreateCollectionPayload struct {
	IntentID  string     `json:"intentId"`
	TxRequest *TxRequest `json:"txRequest"`
}

type PrepareMintInput struct {
	ChainID  string `json:"chainId"`
	Contract string `json:"contract"`
	Standard string `json:"standard"`
	Quantity *int   `json:"quantity,omitempty"`
}

type PrepareMintPayload struct {
	IntentID  string     `json:"intentId"`
	TxRequest *TxRequest `json:"txRequest"`
}

type Query struct {
}

type RPCEndpoint struct {
	URL       string  `json:"url"`
	Priority  int     `json:"priority"`
	Weight    int     `json:"weight"`
	AuthType  *string `json:"authType,omitempty"`
	RateLimit *int    `json:"rateLimit,omitempty"`
	Active    bool    `json:"active"`
}

type SignInSiweInput struct {
	AccountID string `json:"accountId"`
	ChainID   string `json:"chainId"`
	Domain    string `json:"domain"`
}

type Subscription struct {
}

type TrackTxInput struct {
	IntentID string  `json:"intentId"`
	ChainID  string  `json:"chainId"`
	TxHash   string  `json:"txHash"`
	Contract *string `json:"contract,omitempty"`
}

type TxRequest struct {
	To             string  `json:"to"`
	Data           string  `json:"data"`
	Value          string  `json:"value"`
	PreviewAddress *string `json:"previewAddress,omitempty"`
}

type UploadSingleFileInput struct {
	File graphql.Upload `json:"file"`
	Kind MediaKind      `json:"kind"`
}

type UploadSingleFilePayload struct {
	Asset        *MediaAsset `json:"asset"`
	Deduplicated bool        `json:"deduplicated"`
	URL          *MediaUrls  `json:"url,omitempty"`
	Cid          *string     `json:"cid,omitempty"`
}

type User struct {
	ID string `json:"id"`
}

type VerifySiweInput struct {
	AccountID string `json:"accountId"`
	Message   string `json:"message"`
	Signature string `json:"signature"`
}

type ContractStandard string

const (
	ContractStandardErc721  ContractStandard = "ERC721"
	ContractStandardErc1155 ContractStandard = "ERC1155"
	ContractStandardProxy   ContractStandard = "PROXY"
	ContractStandardDiamond ContractStandard = "DIAMOND"
	ContractStandardCustom  ContractStandard = "CUSTOM"
)

var AllContractStandard = []ContractStandard{
	ContractStandardErc721,
	ContractStandardErc1155,
	ContractStandardProxy,
	ContractStandardDiamond,
	ContractStandardCustom,
}

func (e ContractStandard) IsValid() bool {
	switch e {
	case ContractStandardErc721, ContractStandardErc1155, ContractStandardProxy, ContractStandardDiamond, ContractStandardCustom:
		return true
	}
	return false
}

func (e ContractStandard) String() string {
	return string(e)
}

func (e *ContractStandard) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractStandard(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractStandard", str)
	}
	return nil
}

func (e ContractStandard) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ContractStandard) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ContractStandard) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type IntentStatus string

const (
	IntentStatusPending IntentStatus = "pending"
	IntentStatusReady   IntentStatus = "ready"
	IntentStatusFailed  IntentStatus = "failed"
	IntentStatusExpired IntentStatus = "expired"
)

var AllIntentStatus = []IntentStatus{
	IntentStatusPending,
	IntentStatusReady,
	IntentStatusFailed,
	IntentStatusExpired,
}

func (e IntentStatus) IsValid() bool {
	switch e {
	case IntentStatusPending, IntentStatusReady, IntentStatusFailed, IntentStatusExpired:
		return true
	}
	return false
}

func (e IntentStatus) String() string {
	return string(e)
}

func (e *IntentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntentStatus", str)
	}
	return nil
}

func (e IntentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *IntentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e IntentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MediaKind string

const (
	MediaKindImage MediaKind = "IMAGE"
	MediaKindVideo MediaKind = "VIDEO"
	MediaKindAudio MediaKind = "AUDIO"
	MediaKindOther MediaKind = "OTHER"
)

var AllMediaKind = []MediaKind{
	MediaKindImage,
	MediaKindVideo,
	MediaKindAudio,
	MediaKindOther,
}

func (e MediaKind) IsValid() bool {
	switch e {
	case MediaKindImage, MediaKindVideo, MediaKindAudio, MediaKindOther:
		return true
	}
	return false
}

func (e MediaKind) String() string {
	return string(e)
}

func (e *MediaKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaKind", str)
	}
	return nil
}

func (e MediaKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MediaKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MediaKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PinStatus string

const (
	PinStatusPending PinStatus = "PENDING"
	PinStatusPinning PinStatus = "PINNING"
	PinStatusPinned  PinStatus = "PINNED"
	PinStatusFailed  PinStatus = "FAILED"
)

var AllPinStatus = []PinStatus{
	PinStatusPending,
	PinStatusPinning,
	PinStatusPinned,
	PinStatusFailed,
}

func (e PinStatus) IsValid() bool {
	switch e {
	case PinStatusPending, PinStatusPinning, PinStatusPinned, PinStatusFailed:
		return true
	}
	return false
}

func (e PinStatus) String() string {
	return string(e)
}

func (e *PinStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinStatus", str)
	}
	return nil
}

func (e PinStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PinStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PinStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RPCAuthType string

const (
	RPCAuthTypeNone   RPCAuthType = "NONE"
	RPCAuthTypeKey    RPCAuthType = "KEY"
	RPCAuthTypeBasic  RPCAuthType = "BASIC"
	RPCAuthTypeBearer RPCAuthType = "BEARER"
)

var AllRPCAuthType = []RPCAuthType{
	RPCAuthTypeNone,
	RPCAuthTypeKey,
	RPCAuthTypeBasic,
	RPCAuthTypeBearer,
}

func (e RPCAuthType) IsValid() bool {
	switch e {
	case RPCAuthTypeNone, RPCAuthTypeKey, RPCAuthTypeBasic, RPCAuthTypeBearer:
		return true
	}
	return false
}

func (e RPCAuthType) String() string {
	return string(e)
}

func (e *RPCAuthType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RPCAuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RpcAuthType", str)
	}
	return nil
}

func (e RPCAuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RPCAuthType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RPCAuthType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VariantFormat string

const (
	VariantFormatJpg  VariantFormat = "JPG"
	VariantFormatWebp VariantFormat = "WEBP"
	VariantFormatPng  VariantFormat = "PNG"
	VariantFormatMp4  VariantFormat = "MP4"
	VariantFormatGif  VariantFormat = "GIF"
)

var AllVariantFormat = []VariantFormat{
	VariantFormatJpg,
	VariantFormatWebp,
	VariantFormatPng,
	VariantFormatMp4,
	VariantFormatGif,
}

func (e VariantFormat) IsValid() bool {
	switch e {
	case VariantFormatJpg, VariantFormatWebp, VariantFormatPng, VariantFormatMp4, VariantFormatGif:
		return true
	}
	return false
}

func (e VariantFormat) String() string {
	return string(e)
}

func (e *VariantFormat) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VariantFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VariantFormat", str)
	}
	return nil
}

func (e VariantFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VariantFormat) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VariantFormat) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
