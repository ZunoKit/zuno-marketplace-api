// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quangdang46/NFT-Marketplace/shared/proto/chainregistry (interfaces: ChainRegistryServiceClient)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chainregistry "github.com/quangdang46/NFT-Marketplace/shared/proto/chainregistry"
	grpc "google.golang.org/grpc"
)

// MockChainRegistryServiceClient is a mock of ChainRegistryServiceClient interface.
type MockChainRegistryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryServiceClientMockRecorder
}

// MockChainRegistryServiceClientMockRecorder is the mock recorder for MockChainRegistryServiceClient.
type MockChainRegistryServiceClientMockRecorder struct {
	mock *MockChainRegistryServiceClient
}

// NewMockChainRegistryServiceClient creates a new mock instance.
func NewMockChainRegistryServiceClient(ctrl *gomock.Controller) *MockChainRegistryServiceClient {
	mock := &MockChainRegistryServiceClient{ctrl: ctrl}
	mock.recorder = &MockChainRegistryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainRegistryServiceClient) EXPECT() *MockChainRegistryServiceClientMockRecorder {
	return m.recorder
}

// BumpVersion mocks base method.
func (m *MockChainRegistryServiceClient) BumpVersion(arg0 context.Context, arg1 *chainregistry.BumpVersionRequest, arg2 ...grpc.CallOption) (*chainregistry.BumpVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BumpVersion", varargs...)
	ret0, _ := ret[0].(*chainregistry.BumpVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BumpVersion indicates an expected call of BumpVersion.
func (mr *MockChainRegistryServiceClientMockRecorder) BumpVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpVersion", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).BumpVersion), varargs...)
}

// GetAbiBlob mocks base method.
func (m *MockChainRegistryServiceClient) GetAbiBlob(arg0 context.Context, arg1 *chainregistry.GetAbiBlobRequest, arg2 ...grpc.CallOption) (*chainregistry.GetAbiBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAbiBlob", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetAbiBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbiBlob indicates an expected call of GetAbiBlob.
func (mr *MockChainRegistryServiceClientMockRecorder) GetAbiBlob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbiBlob", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetAbiBlob), varargs...)
}

// GetAbiByAddress mocks base method.
func (m *MockChainRegistryServiceClient) GetAbiByAddress(arg0 context.Context, arg1 *chainregistry.GetAbiByAddressRequest, arg2 ...grpc.CallOption) (*chainregistry.GetAbiBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAbiByAddress", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetAbiBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbiByAddress indicates an expected call of GetAbiByAddress.
func (mr *MockChainRegistryServiceClientMockRecorder) GetAbiByAddress(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbiByAddress", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetAbiByAddress), varargs...)
}

// GetContractMeta mocks base method.
func (m *MockChainRegistryServiceClient) GetContractMeta(arg0 context.Context, arg1 *chainregistry.GetContractMetaRequest, arg2 ...grpc.CallOption) (*chainregistry.GetContractMetaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractMeta", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetContractMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractMeta indicates an expected call of GetContractMeta.
func (mr *MockChainRegistryServiceClientMockRecorder) GetContractMeta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMeta", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetContractMeta), varargs...)
}

// GetContracts mocks base method.
func (m *MockChainRegistryServiceClient) GetContracts(arg0 context.Context, arg1 *chainregistry.GetContractsRequest, arg2 ...grpc.CallOption) (*chainregistry.GetContractsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContracts", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetContractsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContracts indicates an expected call of GetContracts.
func (mr *MockChainRegistryServiceClientMockRecorder) GetContracts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetContracts), varargs...)
}

// GetGasPolicy mocks base method.
func (m *MockChainRegistryServiceClient) GetGasPolicy(arg0 context.Context, arg1 *chainregistry.GetGasPolicyRequest, arg2 ...grpc.CallOption) (*chainregistry.GetGasPolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGasPolicy", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetGasPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasPolicy indicates an expected call of GetGasPolicy.
func (mr *MockChainRegistryServiceClientMockRecorder) GetGasPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPolicy", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetGasPolicy), varargs...)
}

// GetRpcEndpoints mocks base method.
func (m *MockChainRegistryServiceClient) GetRpcEndpoints(arg0 context.Context, arg1 *chainregistry.GetRpcEndpointsRequest, arg2 ...grpc.CallOption) (*chainregistry.GetRpcEndpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRpcEndpoints", varargs...)
	ret0, _ := ret[0].(*chainregistry.GetRpcEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRpcEndpoints indicates an expected call of GetRpcEndpoints.
func (mr *MockChainRegistryServiceClientMockRecorder) GetRpcEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRpcEndpoints", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).GetRpcEndpoints), varargs...)
}

// ResolveProxy mocks base method.
func (m *MockChainRegistryServiceClient) ResolveProxy(arg0 context.Context, arg1 *chainregistry.ResolveProxyRequest, arg2 ...grpc.CallOption) (*chainregistry.ResolveProxyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveProxy", varargs...)
	ret0, _ := ret[0].(*chainregistry.ResolveProxyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveProxy indicates an expected call of ResolveProxy.
func (mr *MockChainRegistryServiceClientMockRecorder) ResolveProxy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProxy", reflect.TypeOf((*MockChainRegistryServiceClient)(nil).ResolveProxy), varargs...)
}
