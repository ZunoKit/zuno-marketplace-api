auth-service:
  postgres (auth_db):
    - auth_nonces
    - sessions
    - login_events
  redis:
    - siwe:nonce:*                # nonce SIWE
    - session:blacklist:*         # (tuỳ chọn) revoke/rotate refresh
    - rate:auth:*                 # (tuỳ chọn) rate-limit

wallet-service:
  postgres (wallet_db):
    - wallets                     # UNIQUE(user_id,address,chain_id)
    - approvals                   # current state per operator
    - approvals_history           # audit log
  redis:
    - wallet:approvals:cache:*    # (tuỳ chọn) cache allowance/operator
    - wallet:last-seen:*          # (tuỳ chọn)

user-service:
  postgres (user_db):
    - users
    - profiles

chain-registry-service:
  postgres (chain_registry_db):
    - chains
    - chain_endpoints
    - chain_contracts
    - chain_gas_policy
  redis:
    - cache:chains:{chainId}:{version}

orchestrator-service:           # (collection/mint orchestrator)
  postgres (orchestrator_db):
    - tx_intents
  redis:
    - intent:status:{intentId}

indexer-service:
  mongo (events):
    - events.raw                 # unique by (chainId,txHash,logIndex)
  postgres (indexer_db OR catalog_db):
    - indexer_checkpoints

catalog-service:
  postgres (catalog_db):
    - collections
    - collection_roles
    - collection_bindings
    - collection_mint_config
    - tokens
    - traits
    - trait_values
    - token_trait_links
    - token_balances
    - ownership_transfers
    - nft_flags
    - marketplaces
    - listings
    - offers
    - sales
    - orders
    - order_fills
    - collection_stats
    - token_rarity
    - rarity_scores
    - trait_value_floor
    - activities
    - sync_state
    - processed_events           # idempotency guard cho domain upserts
  redis:
    - cache:read:*               # hot keys / caching layer

media-service:
  mongo (metadata):
    - metadata.docs
  mongo (media):
    - media.assets
    - media.variants
  object-store:
    - s3/ipfs pins

subs-worker / gql-ws:
  queues only (RabbitMQ), (tuỳ chọn) không cần DB riêng



# Exchanges
- auth.events        (topic, durable)
- wallets.events     (topic, durable)
- collections.events (topic, durable)
- collections.domain (topic, durable)
- mints.events       (topic, durable)
- mints.domain       (topic, durable)
- dlx.events         (topic, durable)

# Routing keys (chuẩn hoá)
- auth.events:        user.logged_in
- wallets.events:     wallet.linked
- collections.events: created.eip155.{chainNum}
- collections.domain: upserted.{chainId}.{contract}
- mints.events:       minted.eip155.{chainNum}
- mints.domain:       upserted.{chainId}.{contract}.{tokenId}

# Queues (ví dụ)
- subs.auth.logged_in           ← bind auth.events        user.logged_in
- subs.wallets.linked           ← bind wallets.events     wallet.linked
- catalog.collections.created   ← bind collections.events created.eip155.*
- subs.collections.upserted     ← bind collections.domain upserted.*
- catalog.mints.created         ← bind mints.events       minted.eip155.*
- subs.mints.upserted           ← bind mints.domain       upserted.*

# DLX/Retry
- Tất cả queues gắn DLX = dlx.events
- policy TTL per-try (e.g., 5s → 30s → 2m → 10m), tối đa 4–5 lần



{domain} wants you to sign in with your Ethereum account:
{address}

{optional statement}

URI: {origin-uri}
Version: 1
Chain ID: {chainNumeric}
Nonce: {nonce}
Issued At: {iso8601}
Expiration Time: {iso8601-optional}
Not Before: {iso8601-optional}
Request ID: {optional}
Resources:
- {optional resource 1}
- {optional resource 2}



GraphQL Gateway / BFF

  Inbound: HTTP GraphQL + WebSocket Subscriptions

  Outbound: gRPC → Auth, User, Wallet, ChainRegistry, Media, Collection Orchestrator, Mint Orchestrator, Catalog

  Vai trò: API hợp nhất, auth middleware, mapping CAIP-2/chain numeric, đẩy WS events

Auth Service (SIWE / Sessions)

  DB: Postgres auth_db (auth_nonces, sessions, login_events)

  Cache: Redis siwe:nonce:*, session:blacklist:*

  MQ: publish auth.events:user_logged_in

  Vai trò: phát nonce, verify SIWE (EOA/EIP-1271), quản lý phiên, phát sự kiện đăng nhập

User Service (Users / Profiles)

  DB: Postgres user_db (users, profiles)

  MQ: consume auth.user_logged_in (hoặc gọi sync EnsureUser)

  Vai trò: danh tính ứng dụng, hồ sơ người dùng; idempotent upsert

Wallet Service (Addresses / Approvals)

  DB: Postgres wallet_db (wallets, approvals, approvals_history)

  Cache: Redis wallet:approvals:cache:*

  MQ: publish wallets.events:wallet.linked

  Vai trò: liên kết ví với user, trạng thái approvals/operator

Chain Registry Service

  DB: Postgres chain_registry_db (chains, chain_endpoints, chain_contracts, chain_gas_policy)

  Cache: Redis cache:chains:{chainId}:{version}

  Vai trò: cung cấp địa chỉ factory/exchange/operators, policy gas, confirmations; cache-versioning

Media Service

  Object store: S3/IPFS

  DB: Mongo media (media.assets, media.variants), Mongo metadata (metadata.docs)

  Vai trò: upload/pin, chuẩn hoá metadata, quản lý biến thể media

Collection Orchestrator Service

  DB: Postgres orchestrator_db (tx_intents)

  Cache: Redis intent:status:{intentId}

  Outbound: gRPC → Chain Registry; nhận từ GQL; user signs on-chain

  Vai trò: prepareCreateCollection, trackCollectionTx, idempotent intents

Mint Orchestrator Service

  DB/Cache: dùng chung với Orchestrator (tx_intents, intent:status:*)

  Vai trò: prepareMint721/1155, trackMintTx, idempotent intents

Indexer Service

  DB: Mongo events (events.raw), Postgres indexer_db (indexer_checkpoints)

  MQ: publish collections.events:created.eip155.{num}, mints.events:minted.eip155.{num}

  Vai trò: subscribe/poll node JSON-RPC, parse logs, đảm bảo uniqueness (chainId, txHash, logIndex)

Catalog Service (Read/Domain Model)

  DB: Postgres catalog_db (collections, *bindings, *roles, *mint_config, nfts, token_balances, ownership_transfers, nft_flags, traits… processed_events, v.v.)

  MQ: consume collections.events, mints.events; publish collections.domain:upserted.eip155.{num}.{contract}, mints.domain:upserted.eip155.{num}.{contract}.{tokenId}

  Vai trò: upsert domain idempotent, cung cấp read API (qua GQL/BFF), thống kê/rarity

Subscriptions Worker (WS Bridge)

  MQ: consume *.domain:upserted.*

  DB: Postgres orchestrator_db (đối chiếu tx_intents)

  Cache: Redis intent:status:{intentId}

  Outbound: đẩy sự kiện realtime qua GQL WS

  Vai trò: nối event bus ↔ intent/status của FE

(Infra) RabbitMQ

  Exchanges: auth.events, wallets.events, collections.events, collections.domain, mints.events, mints.domain, dlx.events

  Queues mẫu: subs.auth.logged_in, subs.wallets.linked, catalog.collections.created, subs.collections.upserted, catalog.mints.created, subs.mints.upserted

(Infra) Redis

  Namespaces: siwe:nonce:*, session:blacklist:*, cache:chains:*, intent:status:*, cache:read:*

(Infra) Datastores khác

  Postgres instances tách theo bounded context (auth_db, user_db, wallet_db, chain_registry_db, orchestrator_db, catalog_db, indexer_db)

  S3/IPFS (media), JSON-RPC nodes