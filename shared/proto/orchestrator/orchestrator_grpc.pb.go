// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: orchestrator.proto

package orchestrator

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestratorService_PrepareCreateCollection_FullMethodName = "/orchestrator.OrchestratorService/PrepareCreateCollection"
	OrchestratorService_PrepareMint_FullMethodName             = "/orchestrator.OrchestratorService/PrepareMint"
	OrchestratorService_TrackTx_FullMethodName                 = "/orchestrator.OrchestratorService/TrackTx"
	OrchestratorService_GetIntentStatus_FullMethodName         = "/orchestrator.OrchestratorService/GetIntentStatus"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorServiceClient interface {
	PrepareCreateCollection(ctx context.Context, in *PrepareCreateCollectionRequest, opts ...grpc.CallOption) (*PrepareCreateCollectionResponse, error)
	PrepareMint(ctx context.Context, in *PrepareMintRequest, opts ...grpc.CallOption) (*PrepareMintResponse, error)
	TrackTx(ctx context.Context, in *TrackTxRequest, opts ...grpc.CallOption) (*TrackTxResponse, error)
	GetIntentStatus(ctx context.Context, in *GetIntentStatusRequest, opts ...grpc.CallOption) (*GetIntentStatusResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) PrepareCreateCollection(ctx context.Context, in *PrepareCreateCollectionRequest, opts ...grpc.CallOption) (*PrepareCreateCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareCreateCollectionResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_PrepareCreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) PrepareMint(ctx context.Context, in *PrepareMintRequest, opts ...grpc.CallOption) (*PrepareMintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareMintResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_PrepareMint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) TrackTx(ctx context.Context, in *TrackTxRequest, opts ...grpc.CallOption) (*TrackTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackTxResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_TrackTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetIntentStatus(ctx context.Context, in *GetIntentStatusRequest, opts ...grpc.CallOption) (*GetIntentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntentStatusResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetIntentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility.
type OrchestratorServiceServer interface {
	PrepareCreateCollection(context.Context, *PrepareCreateCollectionRequest) (*PrepareCreateCollectionResponse, error)
	PrepareMint(context.Context, *PrepareMintRequest) (*PrepareMintResponse, error)
	TrackTx(context.Context, *TrackTxRequest) (*TrackTxResponse, error)
	GetIntentStatus(context.Context, *GetIntentStatusRequest) (*GetIntentStatusResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServiceServer struct{}

func (UnimplementedOrchestratorServiceServer) PrepareCreateCollection(context.Context, *PrepareCreateCollectionRequest) (*PrepareCreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCreateCollection not implemented")
}
func (UnimplementedOrchestratorServiceServer) PrepareMint(context.Context, *PrepareMintRequest) (*PrepareMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareMint not implemented")
}
func (UnimplementedOrchestratorServiceServer) TrackTx(context.Context, *TrackTxRequest) (*TrackTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackTx not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetIntentStatus(context.Context, *GetIntentStatusRequest) (*GetIntentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntentStatus not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}
func (UnimplementedOrchestratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_PrepareCreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).PrepareCreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_PrepareCreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).PrepareCreateCollection(ctx, req.(*PrepareCreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_PrepareMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).PrepareMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_PrepareMint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).PrepareMint(ctx, req.(*PrepareMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_TrackTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).TrackTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_TrackTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).TrackTx(ctx, req.(*TrackTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetIntentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetIntentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetIntentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetIntentStatus(ctx, req.(*GetIntentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareCreateCollection",
			Handler:    _OrchestratorService_PrepareCreateCollection_Handler,
		},
		{
			MethodName: "PrepareMint",
			Handler:    _OrchestratorService_PrepareMint_Handler,
		},
		{
			MethodName: "TrackTx",
			Handler:    _OrchestratorService_TrackTx_Handler,
		},
		{
			MethodName: "GetIntentStatus",
			Handler:    _OrchestratorService_GetIntentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator.proto",
}
