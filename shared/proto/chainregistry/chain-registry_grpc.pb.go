// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: chain-registry.proto

package chainregistry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainRegistryService_GetContracts_FullMethodName    = "/chainregistry.ChainRegistryService/GetContracts"
	ChainRegistryService_GetGasPolicy_FullMethodName    = "/chainregistry.ChainRegistryService/GetGasPolicy"
	ChainRegistryService_GetRpcEndpoints_FullMethodName = "/chainregistry.ChainRegistryService/GetRpcEndpoints"
	ChainRegistryService_GetContractMeta_FullMethodName = "/chainregistry.ChainRegistryService/GetContractMeta"
	ChainRegistryService_GetAbiBlob_FullMethodName      = "/chainregistry.ChainRegistryService/GetAbiBlob"
	ChainRegistryService_GetAbiByAddress_FullMethodName = "/chainregistry.ChainRegistryService/GetAbiByAddress"
	ChainRegistryService_ResolveProxy_FullMethodName    = "/chainregistry.ChainRegistryService/ResolveProxy"
	ChainRegistryService_BumpVersion_FullMethodName     = "/chainregistry.ChainRegistryService/BumpVersion"
)

// ChainRegistryServiceClient is the client API for ChainRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== Service =====
type ChainRegistryServiceClient interface {
	GetContracts(ctx context.Context, in *GetContractsRequest, opts ...grpc.CallOption) (*GetContractsResponse, error)
	GetGasPolicy(ctx context.Context, in *GetGasPolicyRequest, opts ...grpc.CallOption) (*GetGasPolicyResponse, error)
	GetRpcEndpoints(ctx context.Context, in *GetRpcEndpointsRequest, opts ...grpc.CallOption) (*GetRpcEndpointsResponse, error)
	// mới:
	GetContractMeta(ctx context.Context, in *GetContractMetaRequest, opts ...grpc.CallOption) (*GetContractMetaResponse, error)
	GetAbiBlob(ctx context.Context, in *GetAbiBlobRequest, opts ...grpc.CallOption) (*GetAbiBlobResponse, error)
	GetAbiByAddress(ctx context.Context, in *GetAbiByAddressRequest, opts ...grpc.CallOption) (*GetAbiBlobResponse, error)
	ResolveProxy(ctx context.Context, in *ResolveProxyRequest, opts ...grpc.CallOption) (*ResolveProxyResponse, error)
	// admin:
	BumpVersion(ctx context.Context, in *BumpVersionRequest, opts ...grpc.CallOption) (*BumpVersionResponse, error)
}

type chainRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainRegistryServiceClient(cc grpc.ClientConnInterface) ChainRegistryServiceClient {
	return &chainRegistryServiceClient{cc}
}

func (c *chainRegistryServiceClient) GetContracts(ctx context.Context, in *GetContractsRequest, opts ...grpc.CallOption) (*GetContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractsResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) GetGasPolicy(ctx context.Context, in *GetGasPolicyRequest, opts ...grpc.CallOption) (*GetGasPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGasPolicyResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetGasPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) GetRpcEndpoints(ctx context.Context, in *GetRpcEndpointsRequest, opts ...grpc.CallOption) (*GetRpcEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRpcEndpointsResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetRpcEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) GetContractMeta(ctx context.Context, in *GetContractMetaRequest, opts ...grpc.CallOption) (*GetContractMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractMetaResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetContractMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) GetAbiBlob(ctx context.Context, in *GetAbiBlobRequest, opts ...grpc.CallOption) (*GetAbiBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbiBlobResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetAbiBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) GetAbiByAddress(ctx context.Context, in *GetAbiByAddressRequest, opts ...grpc.CallOption) (*GetAbiBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbiBlobResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_GetAbiByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) ResolveProxy(ctx context.Context, in *ResolveProxyRequest, opts ...grpc.CallOption) (*ResolveProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveProxyResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_ResolveProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainRegistryServiceClient) BumpVersion(ctx context.Context, in *BumpVersionRequest, opts ...grpc.CallOption) (*BumpVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BumpVersionResponse)
	err := c.cc.Invoke(ctx, ChainRegistryService_BumpVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainRegistryServiceServer is the server API for ChainRegistryService service.
// All implementations must embed UnimplementedChainRegistryServiceServer
// for forward compatibility.
//
// ===== Service =====
type ChainRegistryServiceServer interface {
	GetContracts(context.Context, *GetContractsRequest) (*GetContractsResponse, error)
	GetGasPolicy(context.Context, *GetGasPolicyRequest) (*GetGasPolicyResponse, error)
	GetRpcEndpoints(context.Context, *GetRpcEndpointsRequest) (*GetRpcEndpointsResponse, error)
	// mới:
	GetContractMeta(context.Context, *GetContractMetaRequest) (*GetContractMetaResponse, error)
	GetAbiBlob(context.Context, *GetAbiBlobRequest) (*GetAbiBlobResponse, error)
	GetAbiByAddress(context.Context, *GetAbiByAddressRequest) (*GetAbiBlobResponse, error)
	ResolveProxy(context.Context, *ResolveProxyRequest) (*ResolveProxyResponse, error)
	// admin:
	BumpVersion(context.Context, *BumpVersionRequest) (*BumpVersionResponse, error)
	mustEmbedUnimplementedChainRegistryServiceServer()
}

// UnimplementedChainRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainRegistryServiceServer struct{}

func (UnimplementedChainRegistryServiceServer) GetContracts(context.Context, *GetContractsRequest) (*GetContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContracts not implemented")
}
func (UnimplementedChainRegistryServiceServer) GetGasPolicy(context.Context, *GetGasPolicyRequest) (*GetGasPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasPolicy not implemented")
}
func (UnimplementedChainRegistryServiceServer) GetRpcEndpoints(context.Context, *GetRpcEndpointsRequest) (*GetRpcEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpcEndpoints not implemented")
}
func (UnimplementedChainRegistryServiceServer) GetContractMeta(context.Context, *GetContractMetaRequest) (*GetContractMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractMeta not implemented")
}
func (UnimplementedChainRegistryServiceServer) GetAbiBlob(context.Context, *GetAbiBlobRequest) (*GetAbiBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbiBlob not implemented")
}
func (UnimplementedChainRegistryServiceServer) GetAbiByAddress(context.Context, *GetAbiByAddressRequest) (*GetAbiBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbiByAddress not implemented")
}
func (UnimplementedChainRegistryServiceServer) ResolveProxy(context.Context, *ResolveProxyRequest) (*ResolveProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveProxy not implemented")
}
func (UnimplementedChainRegistryServiceServer) BumpVersion(context.Context, *BumpVersionRequest) (*BumpVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpVersion not implemented")
}
func (UnimplementedChainRegistryServiceServer) mustEmbedUnimplementedChainRegistryServiceServer() {}
func (UnimplementedChainRegistryServiceServer) testEmbeddedByValue()                              {}

// UnsafeChainRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainRegistryServiceServer will
// result in compilation errors.
type UnsafeChainRegistryServiceServer interface {
	mustEmbedUnimplementedChainRegistryServiceServer()
}

func RegisterChainRegistryServiceServer(s grpc.ServiceRegistrar, srv ChainRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedChainRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainRegistryService_ServiceDesc, srv)
}

func _ChainRegistryService_GetContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetContracts(ctx, req.(*GetContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_GetGasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetGasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetGasPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetGasPolicy(ctx, req.(*GetGasPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_GetRpcEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRpcEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetRpcEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetRpcEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetRpcEndpoints(ctx, req.(*GetRpcEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_GetContractMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetContractMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetContractMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetContractMeta(ctx, req.(*GetContractMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_GetAbiBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbiBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetAbiBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetAbiBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetAbiBlob(ctx, req.(*GetAbiBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_GetAbiByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbiByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).GetAbiByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_GetAbiByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).GetAbiByAddress(ctx, req.(*GetAbiByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_ResolveProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).ResolveProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_ResolveProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).ResolveProxy(ctx, req.(*ResolveProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainRegistryService_BumpVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainRegistryServiceServer).BumpVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainRegistryService_BumpVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainRegistryServiceServer).BumpVersion(ctx, req.(*BumpVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainRegistryService_ServiceDesc is the grpc.ServiceDesc for ChainRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainregistry.ChainRegistryService",
	HandlerType: (*ChainRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContracts",
			Handler:    _ChainRegistryService_GetContracts_Handler,
		},
		{
			MethodName: "GetGasPolicy",
			Handler:    _ChainRegistryService_GetGasPolicy_Handler,
		},
		{
			MethodName: "GetRpcEndpoints",
			Handler:    _ChainRegistryService_GetRpcEndpoints_Handler,
		},
		{
			MethodName: "GetContractMeta",
			Handler:    _ChainRegistryService_GetContractMeta_Handler,
		},
		{
			MethodName: "GetAbiBlob",
			Handler:    _ChainRegistryService_GetAbiBlob_Handler,
		},
		{
			MethodName: "GetAbiByAddress",
			Handler:    _ChainRegistryService_GetAbiByAddress_Handler,
		},
		{
			MethodName: "ResolveProxy",
			Handler:    _ChainRegistryService_ResolveProxy_Handler,
		},
		{
			MethodName: "BumpVersion",
			Handler:    _ChainRegistryService_BumpVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain-registry.proto",
}
