name: Auth Service CI/CD

on:
  push:
    branches: [main, develop, feature/handle-auth]
    paths:
      - 'services/auth-service/**'
      - 'services/user-service/**'
      - 'services/wallet-service/**'
      - 'shared/**'
      - 'proto/**'
      - '.github/workflows/auth-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/auth-service/**'
      - 'services/user-service/**'
      - 'services/wallet-service/**'
      - 'shared/**'
      - 'proto/**'

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.55'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate proto files
        run: make generate-proto

      - name: Run migrations
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DATABASE: test_db
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path services/auth-service/db -database postgresql://test:test@localhost:5432/test_db?sslmode=disable up
          migrate -path services/user-service/db -database postgresql://test:test@localhost:5432/test_db?sslmode=disable up
          migrate -path services/wallet-service/db -database postgresql://test:test@localhost:5432/test_db?sslmode=disable up

      - name: Run unit tests
        env:
          POSTGRES_HOST: localhost
          REDIS_HOST: localhost
          JWT_SECRET: test-secret
          REFRESH_SECRET: test-refresh-secret
        run: |
          go test -v -race -coverprofile=coverage.out ./services/auth-service/...
          go test -v -race -coverprofile=coverage.out ./services/user-service/...
          go test -v -race -coverprofile=coverage.out ./services/wallet-service/...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-auth

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for services to be ready

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml run test-runner

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Auth Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/auth-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
            ${{ secrets.DOCKER_USERNAME }}/auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push User Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/user-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/user-service:latest
            ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Wallet Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/wallet-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wallet-service:latest
            ${{ secrets.DOCKER_USERNAME }}/wallet-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: './services/...'
