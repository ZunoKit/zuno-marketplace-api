name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "fix/**"
      - "hotfix/**"
  pull_request:
    branches: ["main", "develop"]

jobs:
  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install commitlint
        run: |
          npm install --save-dev @commitlint/config-conventional @commitlint/cli

      - name: Validate commits with commitlint
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose
          else
            npx commitlint --from HEAD~1 --to HEAD --verbose
          fi

  format-and-lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Download dependencies
        run: |
          go mod download
          go mod tidy

      - name: Install tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Check formatting
        run: |
          unformatted=$(find . -name "*.go" -not -path "./vendor/*" -not -name "*.pb.go" -exec gofmt -s -l {} + 2>/dev/null || true)
          if [ -n "$unformatted" ]; then
            echo "❌ The following files are not formatted:"
            echo "$unformatted"
            echo "Please run 'go fmt ./...' to format your code."
            exit 1
          fi

      - name: Check imports
        run: |
          import_issues=$(find . -name "*.go" -not -path "./vendor/*" -not -name "*.pb.go" -exec goimports -l {} + 2>/dev/null || true)
          if [ -n "$import_issues" ]; then
            echo "❌ The following files have import issues:"
            echo "$import_issues"
            echo "Please run 'goimports -w .' to fix imports."
            exit 1
          fi

      - name: Run golangci-lint
        run: |
          if command -v $(go env GOPATH)/bin/golangci-lint >/dev/null 2>&1; then
            $(go env GOPATH)/bin/golangci-lint run --timeout=5m
          else
            echo "golangci-lint not found, skipping"
          fi
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Download dependencies
        run: |
          go mod download
          go mod tidy

      - name: Generate protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          make generate-proto

      - name: Run tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          MONGODB_HOST: localhost
          MONGODB_PORT: 27017
          MONGODB_USER: root
          MONGODB_PASSWORD: password
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
          RABBITMQ_USER: guest
          RABBITMQ_PASSWORD: guest
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [format-and-lint, test]
    strategy:
      matrix:
        service:
          - auth-service
          - catalog-service
          - chain-registry-service
          - graphql-gateway
          - media-service
          - orchestrator-service
          - user-service
          - indexer-service
          - subscription-worker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Download dependencies
        run: |
          go mod download
          go mod tidy

      - name: Generate protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          make generate-proto

      - name: Build ${{ matrix.service }}
        run: |
          if [ -f "services/${{ matrix.service }}/cmd/main.go" ]; then
            cd services/${{ matrix.service }}
            go build -v -o bin/${{ matrix.service }} cmd/main.go
          elif [ -f "services/${{ matrix.service }}/main.go" ]; then
            cd services/${{ matrix.service }}
            go build -v -o bin/${{ matrix.service }} main.go
          else
            echo "No main.go found for ${{ matrix.service }}"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-binary
          path: services/${{ matrix.service }}/bin/${{ matrix.service }}
          retention-days: 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Install Gosec
        run: curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

      - name: Run Gosec Security Scanner
        run: |
          gosec -fmt json -out results.json ./... || echo "Gosec scan completed"
          gosec -fmt text ./... || echo "Gosec scan completed"
        continue-on-error: true
